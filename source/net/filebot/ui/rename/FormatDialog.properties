help.url = https://www.filebot.net/naming.html

episode.syntax: <html><b>{</b> <b>}</b> \u2026 expression, <b>n</b> \u2026 name, <b>s</b> \u2026 season, <b>e</b> \u2026 episode, <b>t</b> \u2026 title</html>
movie.syntax: <html><b>{</b> <b>}</b> \u2026 expression, <b>n</b> \u2026 name, <b>y</b> \u2026 year</html>
music.syntax: <html><b>{</b> <b>}</b> \u2026 expression, <b>n</b> \u2026 album artist, <b>t</b> \u2026 title, <b>album</b> \u2026 album, <b>pi</b> \u2026 track</html>
file.syntax: <html><b>{</b> <b>}</b> \u2026 expression, <b>n</b> \u2026 name</html>

episode.sample: {"@type":"Episode","seriesName":"Firefly","season":1,"episode":1,"title":"Serenity","absolute":1,"airdate":{"year":2002,"month":12,"day":20},"id":297999,"seriesInfo":{"database":"TheTVDB","order":"DVD","language":"en","id":78874,"name":"Firefly","aliasNames":["Serenity","Firefly (2002)","\u0421\u0432\u0435\u0442\u043B\u044F\u0447\u043E\u043A","\u05E4\u05D9\u05D9\u05E8\u05E4\u05DC\u05D9","\uD30C\uC774\uC5B4\uD50C\uB77C\uC774"],"certification":"TV-14","startDate":{"year":2002,"month":9,"day":20},"genres":["Drama","Science-Fiction"],"network":"FOX (US)","rating":9.5,"ratingCount":473,"runtime":45,"status":"Ended"}}
movie.sample: {"@type":"MoviePart","partIndex":1,"partCount":2,"year":2009,"imdbId":499549,"tmdbId":19995,"language":"en","id":19995,"name":"Avatar","aliasNames":[]}
music.sample: {"@type":"AudioTrack","database":"ID3","artist":"Leona Lewis","title":"I See You","album":"Avatar","albumArtist":"James Horner","trackTitle":"I See You","albumReleaseDate":{"year":2009,"month":12,"day":11},"trackIndex":14,"trackCount":14}

# S00E00
episode.example[0]: {n} - {s00e00} - {t}
# 1x01
episode.example[1]: {n} - {sxe} - {t}
# airdate
episode.example[2]: {n} [{airdate}] {t}
# uglyfy name
episode.example[3]: {n.space('.').lower()}.{s}{e.pad(2)}
# organize folder structure
episode.example[4]: {n}/{'Season '+s}/{n} - {s00e00} - {t}
# plex standard
episode.example[5]: {home}/Media/{plex}

# simple name/year
movie.example[0]: {n.colon(' - ')} ({y}){' CD'+pi}{subt}
# name/year and media info
movie.example[1]: {n} ({y}, {director}) {vf} {af}
# normalized scene name
movie.example[2]: {n.space('.')}.{y}{'.'+source}.{vc}
# organize folder structure
movie.example[3]: {ny}/{ny}{' CD'+pi}{subt}
# name/year and ratings
movie.example[4]: {genre}/{n} {[y, certification, rating]}
# plex standard
movie.example[5]: {home}/Media/{plex}

# simple artist - title
music.example[0]: {artist} - {t}
# simple artist - album - title
music.example[1]: {[y]} {artist} - {t}
# artist - title [48.0 kHz]
music.example[2]: {n} - {t} {[khz]}
# artist - title [2ch, 128000]
music.example[3]: {pi.pad(2)} {n} - {t} {[af, kbps]}
# organize folder structure
music.example[4]: {n}/{album+'/'}{pi.pad(2)+'. '} {t}
# plex standard
music.example[5]: {home}/Media/{plex}

# simple filename without extension
file.example[0]: {i.pad(3)} - {n.after('-')}
# remove special characters
file.example[1]: {n.ascii().normalizePunctuation().space('_')}
# remove release info patterns
file.example[2]: {n.stripReleaseInfo().space(' ')}
# generate name from iTunes ID3 tags
file.example[3]: {media.Album} - {media.PartID} - {media.Title}
# restore original filename via embedded title metadata (if possible)
file.example[4]: {any{mediaTitle}{n}}
# sort by Last-Modified or Date-Taken
file.example[5]: {dt.format('yyyy-MM-dd HH\u2236mm\u2236ss')}
